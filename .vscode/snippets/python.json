
{ 
  // https://snippet-generator.app/
  "Django: view imports ": {
    "prefix": "viewimport",
    "body": [
      "from django.views.generic.base       import TemplateView",
      "from django.views.generic            import View",
      "from django.shortcuts                import render, get_object_or_404",
      "from django.template                 import loader, RequestContext",
      "from django.urls                     import reverse",
      "from django.http                     import JsonResponse, HttpResponseNotFound, HttpResponse, HttpResponseRedirect",
      "from django.views.decorators.csrf    import csrf_protect",
      "from django.utils.decorators         import method_decorator",
      "from django.contrib.auth.decorators  import login_required",
      "from django.db.models                import Q",
      "#from django.contrib.postgres.search import SearchVector",
      "from guardian.shortcuts              import get_objects_for_user",
      "import                                      datetime"
    ],
    "description": "Django: view imports "
  },
  "Django: auth view ": {
    "prefix": "viewauth",
    "body": [
      "@login_required",
      "# @csrf_protect # - for POST",
      "def ${1:view_name}(request, *args, **kwargs):",
      "\t${3}",
      "\tcontext= {}",
      "\treturn render(request, '${2:demoApp/index.html}', context)"
    ],
    "description": "Django: auth view "
    },
    "Django: App URLs File": {
		"prefix": "urls",
		"body": [
		  "from django.urls import path, include, re_path",
		  "from .views\t  import *",
		  "",
		  "urlpatterns = [",
		  "${1:body}   ",
		  "]"
		],
		"description": "App URLs File"
	  },

	  "Django: linked App URLs File in global URLs.py": {
		"prefix": "iurls",
		"body": [
		  "# ${1:app_name}App",
		  "path('${1:app_name}/', include('${1:app_name}.urls')), "
		],
		"description": "linked App URLs File in global URLs.py"
    },
    "Django: Modell": {
        "prefix": "model",
        "body": [
          "class ${1:ModelName}(models.Model):",
          "\t# Fields",
          "\ttitle = models.CharField(max_length=200)",
          "\t{3}",
          "\t# Metods",
          "\tdef __str__(self):",
          "\t\treturn str(self.title)",
          "\t",
          "\tdef get_absolute_url(self):",
          "\t\treturn reverse(\"${2:reverse}\") #, kwargs={\"pk\": self.pk})",
          "",
          "\tclass Meta():",
          "\t\tverbose_name = '${1:ModelName}'",
          "\t\tverbose_name_plural = \"${1:ModelName}'s\"",
          "\t\t# permissions = (",
          "\t\t#\t\t\t\t ('add', 'Can add'), ",
          "\t\t#\t\t\t\t ('change', 'Can changr'),",
          "\t\t#\t\t\t\t ('delete', 'Can delete'),",
          "\t\t#\t\t\t\t ('view', 'Can view'),",
          "\t\t#\t\t\t ) "
        ],
        "description": "Django: Modell Full"
    },
    "Django: ModelAdmin": {
        "prefix": "admin",
        "body": [
          "@admin.register(${1:Model})",
          "class ${1:Model}Admin(admin.ModelAdmin):",
          "\tsearch_fields = (${2},)",
          "\tordering = ('',)",
          "\tlist_filter = ('',)",
          "\tlist_display = ('',)",
        //  "admin.site.register(${1:Model}, ${1:Model}Admin)"
        ],
        "description": "Django: ModelAdmin"
    },

    "Django: ModelAdmin Micro": {
        "prefix": "admin_micro",
        "body": [
          "admin.site.register(${1:Model})"
        ],
        "description": "Django: ModelAdmin Micro"
    },

    "Django: Simple TestCase": {
      "prefix": "testcase",
      "body": [
        "class ${1:Name}TestCase(TestCase):",
        "",
        "\t@classmethod",
        "\tdef setUpTestData(cls):",
        "\t\t\"\"\"Установки запускаются перед запуском теста на уровне настройки всего класса\"\"\"",
        "\t\tuser = User.objects.create(email=\"root@test.com\", password='top_secret')",
        "\t\tuser.save()",
        "",
        "\tdef setUp(self): ",
        "\t\t\"\"\"Установки запускаются перед каждым тестом.\"\"\"",
        "\t\tuser = User.objects.create(email=\"user@test.com\", password='top_secret')",
        "\t\tuser.save()",
        "\t\t${2}",
        "",
        "\tdef tearDown(self):",
        "\t\t\"\"\"Очистка после каждого метода\"\"\"",
        "\t\tpass",
        "",
        "\t# TESTS: ",
        "\tdef test_one_plus_one_equals_two(self):",
        "\t\t${3}",
        "\t\tself.assertEqual(1 + 1, 2)",
        ""
      ],
      "description": "Django: Simple TestCase"
    },

    "Django: Simple Test": {
      "prefix": "test",
      "body": [
        "def test_${1:name}(self):",
        "\t${2}",
        "\tself.assertEqual(1 + 1, 2)"
      ],
      "description": "Django: Simple Test"
    },
    "classview": {
      "prefix": "Django: Class Base View ",
      "body": [
        "class ${1:name}View(TemplateView):",
        "\tis_print=False",
        "\tdef dprint(self, *args, **kwargs):",
        "\t\tif self.is_print:",
        "\t\t\tprint(*args, **kwargs)",
        "",
        "\ttemplate_name = \"${2:app/file-name}.html\"",
        "",
        "\tdef get_context_data(self, **kwargs):",
        "\t\tcontext = super(${1:name}View, self).get_context_data(**kwargs)",
        "\t\t#context['something'] = ${3}",
        "\t\treturn context"
      ],
      "description": "classview"
    },
	  
}